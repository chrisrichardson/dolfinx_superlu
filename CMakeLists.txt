# This file was generated by running
#
# python cmake/scripts/generate-cmakefiles from dolfinx/cpp
#
cmake_minimum_required(VERSION 3.16)

set(PROJECT_NAME demo_poisson)
project(${PROJECT_NAME} LANGUAGES C CXX)

# Set C++20 standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(NOT TARGET dolfinx)
  find_package(DOLFINX REQUIRED)
endif()

if (DEFINED SCALAR)
  set(C_SCALAR ${SCALAR})
  set(CPP_SCALAR ${SCALAR})
  if(${SCALAR} STREQUAL "complex")
    set(C_SCALAR "double _Complex")
    set(CPP_SCALAR "std::complex<double>")
  endif()
  message(STATUS "C_SCALAR=${C_SCALAR}")
  message(STATUS "CPP_SCALAR=${CPP_SCALAR}")
else()
    message(FATAL_ERROR "SCALAR should be defined in CMake. e.g. -DSCALAR=float [or double or complex]")
endif()

# Add target to compile UFL files
add_compile_definitions(SCALAR=${CPP_SCALAR})
set(SCALAR_TYPE "--scalar_type=${C_SCALAR}")

add_custom_command(
  OUTPUT poisson.c
  COMMAND ffcx ${CMAKE_CURRENT_SOURCE_DIR}/poisson.py ${SCALAR_TYPE}
  VERBATIM
  DEPENDS poisson.py
  COMMENT "Compile poisson.py using FFCx"
)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

add_executable(${PROJECT_NAME} superlu.cpp main.cpp ${CMAKE_CURRENT_BINARY_DIR}/poisson.c)
target_link_directories(${PROJECT_NAME} PUBLIC /opt/packages/petsc-3.17.2/lib)
target_link_libraries(${PROJECT_NAME} dolfinx superlu_dist)

# Do not throw error for 'multi-line comments' (these are typical in rst which
# includes LaTeX)
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag("-Wno-comment" HAVE_NO_MULTLINE)
set_source_files_properties(
  main.cpp
  PROPERTIES
    COMPILE_FLAGS
    "$<$<BOOL:${HAVE_NO_MULTLINE}>:-Wno-comment -Wall -Wextra -pedantic -Werror>"
)
